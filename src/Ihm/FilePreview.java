/*
 * FilePreview.java
 *
 * Created on 4 septembre 2007, 10:24
 */

package Ihm;

import Utils.Extension;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.util.zip.GZIPInputStream;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.filechooser.*;
import java.beans.*;
import java.text.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 *
 * @author  nezetic
 */
public class FilePreview extends javax.swing.JPanel implements PropertyChangeListener{
    private JFileChooser chooser;
    private ResourceBundle msgs;
    
    public static final int FLPREV_SIZE=50;
    
    /**
     * Creates new form FilePreview
     */
    public FilePreview(JFileChooser chooser, ResourceBundle msgs) {
        this.msgs = msgs;
        this.chooser = chooser;
        this.chooser.addPropertyChangeListener(this);
        
        initComponents();        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        UItype = new javax.swing.JLabel();
        UItype_desc = new javax.swing.JLabel();
        UIanalysis = new javax.swing.JLabel();
        UIanalysis_desc = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        UImod = new javax.swing.JLabel();
        UImod_desc = new javax.swing.JLabel();
        UIname = new javax.swing.JLabel();
        UIname_desc = new javax.swing.JLabel();
        UIsize = new javax.swing.JLabel();
        UIsize_desc = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jTabbedPane1 = new javax.swing.JTabbedPane();

        setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        UItype.setText("jLabel1");

        UItype_desc.setText(msgs.getString("File_type"));

        UIanalysis.setText("jLabel1");

        UIanalysis_desc.setText(msgs.getString("Analysis_c"));

        UImod.setText("jLabel1");

        UImod_desc.setText(msgs.getString("Last_Mod"));

        UIname.setText("jLabel1");

        UIname_desc.setText(msgs.getString("File_name"));

        UIsize.setText("jLabel1");

        UIsize_desc.setText(msgs.getString("Size"));

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(UImod_desc)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(UImod))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(UIsize_desc)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(UIsize))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(UIname_desc)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(UIname)))
                .addContainerGap(159, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UIname)
                    .add(UIname_desc))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UIsize_desc)
                    .add(UIsize))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UImod)
                    .add(UImod_desc))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(UItype_desc)
                                    .add(UIanalysis_desc))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(UItype)
                                    .add(UIanalysis)))
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(61, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                        .add(61, 61, 61))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UItype)
                    .add(UItype_desc))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(UIanalysis)
                    .add(UIanalysis_desc))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 212, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );
        jScrollPane1.setViewportView(jPanel2);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void getInfos(File file) throws Exception{
        FileInputStream fs=null;
        StringBuffer flprev;
        
        try{
            DocumentBuilderFactory fabrique = DocumentBuilderFactory.newInstance();
            //fabrique.setValidating(true);
            
            DocumentBuilder constructeur = fabrique.newDocumentBuilder();
            
            fs = new FileInputStream(file);
            InputStream st=fs;
            
            if(Extension.getExtension(file).equalsIgnoreCase(Extension.baldrx)) {
                st=new GZIPInputStream(st);
                UItype.setText(msgs.getString("FT_BALDRX"));
            }else
                UItype.setText(msgs.getString("FT_BALDR"));
            
            Document document = constructeur.parse(st);
            
            Element racine = document.getDocumentElement();
           
            NodeList tabs = racine.getElementsByTagName("onglet");
            
            jTabbedPane1.removeAll();
            
            for(int i=0; i<tabs.getLength(); i++){
                int tcnt = jTabbedPane1.getTabCount();
                final PreviewTab newtab=new PreviewTab(tcnt + 1,msgs);
                newtab.setFiles(0,"...");
                
                /* <onglet> */
                Element etab = (Element)tabs.item(i);
                /* <fileList> */
                Element efilelist = (Element)etab.getElementsByTagName("filelist").item(0);
                /* <dir> */
                NodeList dirlist = efilelist.getElementsByTagName("dir");
                flprev = new StringBuffer();
                int fcnt=0;
                boolean flmax=false;
                
                newtab.setDirs(dirlist.getLength());
                for(int j=0; j<dirlist.getLength(); j++){
                    Element edir = (Element)dirlist.item(j);
                    //System.out.println("Dir: " + edir.getAttribute("name"));
                    /* <file> */
                    NodeList filelist = edir.getElementsByTagName("file");
                    for(int k=0; k<filelist.getLength(); k++){
                        Element efile = (Element)filelist.item(k);
                        if(!flmax){
                            if(flprev.length() < FLPREV_SIZE){
                                flprev.append((new File(efile.getTextContent())).getName() + " ");
                            }else{
                                flmax=true;
                            }
                        }
                        fcnt++;
                        //System.out.println("File: " + efile.getTextContent());
                    }
                    //fichiers.setText(fcnt + " " + flprev.toString());
                    newtab.setFiles(fcnt,summString(flprev.toString(),FLPREV_SIZE));
                    //System.out.println(flprev.toString());
                }
                /* </dir> */
                /* </fileList> */
                /* <analys> */
                Element eanalys = (Element)etab.getElementsByTagName("analys").item(0);
                if(eanalys != null){
                    UIanalysis.setText(msgs.getString("Yes"));
                    //System.out.println("Analyse: Ok");
                }else{
                    UIanalysis.setText(msgs.getString("No"));
                }
                /* <rapport> */
                Element erapport = (Element)etab.getElementsByTagName("rapport").item(0);
                newtab.setSumm(erapport.getTextContent());
                //description.setText(summString(erapport.getTextContent(),25));
                //System.out.println(erapport.getTextContent());
                /* </onglet> */
                
                jTabbedPane1.addTab(msgs.getString("Analysis")+" "+ (tcnt+1)  ,newtab);
                jTabbedPane1.setSelectedComponent(newtab);
            }
            
        }catch(Exception e){
            e.printStackTrace();
            //throw e;
        }finally{
            try{fs.close();}catch(Exception e){}
            return;
        }
    }
    
    public void propertyChange(PropertyChangeEvent e) {
        String prop = e.getPropertyName();
       
        if(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(prop)){
            
            File file = (File) e.getNewValue();
            
            if(file == null){
                this.setVisible(false);
                return;
            }
            
            String ext = Extension.getExtension(file);
            
            if(ext == null){
                this.setVisible(false);
                return;
            }
            
            if(!ext.equalsIgnoreCase(Extension.baldr) && !ext.equalsIgnoreCase(Extension.baldrx)){
                this.setVisible(false);
                return;
            }
            
            try {
                getInfos(file);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            
            FileSystemView vueSysteme = FileSystemView.getFileSystemView();
            Locale locale = Locale.getDefault();
            NumberFormat nf = NumberFormat.getInstance(locale);
            DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.SHORT, locale);
            
            UIname.setText(vueSysteme.getSystemDisplayName(file));
            
            String tailleFile = nf.format(file.length()/1024.0)+" Kb";
            UIsize.setText(tailleFile);
            
            String dateFile = dateFormat.format(new Date(file.lastModified()));
            UImod.setText(dateFile);
            
            this.setVisible(true);
        }else{
            this.setVisible(false);
        }
     
    }
    
    
    public String summString(String s,int longueur){
        if (s.length() <= longueur) return s;
        String debut = s.substring(0,longueur-3);
        return debut+"...";
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel UIanalysis;
    private javax.swing.JLabel UIanalysis_desc;
    private javax.swing.JLabel UImod;
    private javax.swing.JLabel UImod_desc;
    private javax.swing.JLabel UIname;
    private javax.swing.JLabel UIname_desc;
    private javax.swing.JLabel UIsize;
    private javax.swing.JLabel UIsize_desc;
    private javax.swing.JLabel UItype;
    private javax.swing.JLabel UItype_desc;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
    
}
